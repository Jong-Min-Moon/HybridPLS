
library(ftsa)
library(funcharts)
library(fda)

source("class_hybrid_predictors.R")

kidney <- read_fd_kidney("/Users/mac/GitHub/fingernail/data/renogram_data.csv", response_mean_diagnosis, 0.1, 15,1000)

W_train <- kidney$W_train
y_train <- kidney$y_train
y_train_mean <- mean(y_train)
y_train <- y_train- y_train_mean

W_test <- kidney$W_test
y_test <- kidney$y_test

W_train_mean <- kidney$W_train_mean


W_test_centered <- sub_broadcast(W_test , W_train_mean)
y_test_centered <- y_test - y_train_mean

pls_model <- nipals_pen_hybrid(W_train, y_train, 5, 1, 1)


L_trend <- rep(NA, 10)
for(L in 1:10){
  print(paste("L=", L))
  pls_model <- nipals_pen_hybrid(W_train, y_train, L, 1, 1)
  y_pred_pls <- predict_test(pls_model, W_test_centered)
  L_trend[L] <- mse(y_pred_pls, y_test_centered)
}

plot(L_trend, main = "kappa=1, tau = 1, L = 1-6", ylab = "MSE", xlab = "number of iteration", ylim = c(0.05, 0.4))
lines(L_trend)
abline(a=lin_result)





data_lin <- data.frame(cbind(y_train, W_train_centered@Z))
lin<-lm(y_train~., data_lin)
summary(lin)
n_test <- length(y_test)
design_mat <- cbind(
  rep(1, n_test), 
  W_test_centered@Z)
y_pred_lin <- design_mat %*% (lin$coefficients)
lin_result <- mse(y_pred_lin, y_test_centered)



library(funcharts)
set.seed(0)
nbasis <- 15
nvar <- 2
bs <- create.bspline.basis(rangeval = c(0, 1), nbasis = nbasis)

nobs_train <- length(y_train)
coef_train <- array( dim = c(nbasis, nobs, nvar))
coef_train[,,1] <- t(W_train_centered$W@basis_coeff_1)
coef_train[,,2] <- t(W_train_centered$W@basis_coeff_2)
mfdobj_train <- mfd(coef = coef_train, basisobj = bs)
mod <- sof_pc(y_train_centered$y, mfdobj_train)


nobs_test <- length(y_test)
coef_test <- array( dim = c(nbasis, nobs_test, nvar))
coef_test[,,1] <- t(W_test_centered@basis_coeff_1)
coef_test[,,2] <- t(W_test_centered@basis_coeff_2)
mfdobj_test <- mfd(coef = coef_test, basisobj = bs)
pred_sof <- predict_sof_pc(mod, mfdobj_test)$fit
mse(pred_sof, y_test_centered)



L_trend <- rep(NA, 20)
for(L in 1:20){
  print(paste("L=", L))
  pls_model <- nipals_pen_hybrid(W_train, y_train, L, 0, 0)
  y_pred_pls <- predict_test(pls_model, W_test_centered)
  L_trend[L] <- mse(y_pred_pls, y_test_centered)
}
plot(L_trend, main = "kappa=1, tau = 1, L = 1-6", ylab = "MSE", xlab = "number of iteration", ylim = c(0.05, 0.4))
lines(L_trend)


kappa_trend <- rep(NA, 10)
for(kappa in 1:10){
  pls_model <- nipals_pen_hybrid(W_train, y_train, 10, (1/10)^kappa, 1)
  y_pred_pls <- predict_test(pls_model, W_test_centered)
  kappa_trend[kappa] <- mse(y_pred_pls, y_test_centered)
}
plot(kappa_trend, main = "L=3, tau = 1, kappa=1-10", ylab = "MSE", xlab = "kappa")
lines(kappa_trend)



tau_trend <- rep(NA, 10)
for(tau in 1:10){
  pls_model <- nipals_pen_hybrid(W_train, y_train, 3, 1, tau)
  y_pred_pls <- predict_test(pls_model, W_test_centered)
  tau_trend[tau] <- mse(y_pred_pls, y_test_centered)
}
plot(tau_trend, main = "L=3, kappa = 1, tau=1-10", ylab = "MSE", xlab = "tau")
lines(tau_trend)











#fda package
kidney_variables <- separate_variables_kidney("/Users/mac/GitHub/fingernail/data/renogram_data.csv")

#mean function through fda package
traing_set_og <- kidney_variables$training_set
reno_base_values <- traing_set_og$reno_base_value
reno_base_x <- traing_set_og$reno_base_x
my_basis <- create.bspline.basis(rangeval = c(0,1), nbasis = 15)
reno_base_F <- Data2fd(reno_base_x, t(reno_base_values), my_basis)
plot(reno_base_F)
plot(mean.fd(reno_base_F))



mean_by_coefficient <- fd(coef = apply(W_train@basis_coeff_1, 2, mean), basis = my_basis)





